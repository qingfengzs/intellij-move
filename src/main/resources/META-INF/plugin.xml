<idea-plugin
    require-restart="true"
>
    <id>org.sui.lang</id>
    <name>Sui Move Language</name>

    <vendor>MoveFuns</vendor>

  <description>
    <![CDATA[

            <p>This IntelliJ IDEA plugin streamlines your Sui Move development workflow.</p>

            <h3>Boost your productivity with:</h3>

            <ul>
              <li><strong>Syntax highlighting:</strong> Write code faster with fewer errors.</li>
              <li><strong>Code formatting:</strong> Keep your code clean and consistent.</li>
              <li><strong>Go-to-definition:</strong> Navigate your codebase instantly.</li>
              <li><strong>Type inference:</strong> Let the plugin predict your types for cleaner code.</li>
              <li><strong>Custom commands:</strong> Tailor commands to your project's needs.</li>
              <li><strong>Quick access buttons:</strong> Speed up common development tasks.</li>
              <li><strong>Sui binary integration:</strong> Interact seamlessly with Sui Move tools.</li>
            </ul>

            <h3>Effortlessly manage your project:</h3>

            <ul>
              <li><strong>Customizable environment:</strong> Set your Sui CLI path for a personalized setup.</li>
              <li><strong>Dedicated ToolWindow:</strong> Refresh your project, manage accounts, switch networks, and more â€“ all in one place.</li>
            </ul>

            <h3>Get started:</h3>

            <ol>
              <li><strong>Install the plugin:</strong> Find it on the IntelliJ IDEA plugin marketplace.</li>
              <li><strong>Set your Sui CLI path:</strong> Go to <em>Settings > Languages & Frameworks > Sui Move Language</em>.</li>
              <li><strong>Explore the ToolWindow:</strong> Access powerful features to manage your project.</li>
              <li><strong>Define custom commands:</strong> Configure and run project-specific commands with ease.</li>
            </ol>

            <h3>Need help?</h3>

            <p>Visit our GitHub repository: <a href="https://github.com/movefuns/intellij-move">https://github.com/movefuns/intellij-move</a></p>
        ]]>
  </description>

  <resource-bundle>messages.MvBundle</resource-bundle>

  <depends>com.intellij.modules.platform</depends>
  <depends>org.toml.lang</depends>

  <extensions defaultExtensionNs="com.intellij">

        <fileType name="SUI_BYTECODE"
                  extensions="mv"
                  implementationClass="org.sui.bytecode.SuiBytecodeFileType"
                  fieldName="INSTANCE"/>
        <filetype.decompiler filetype="SUI_BYTECODE"
                             implementationClass="org.sui.bytecode.SuiBytecodeDecompiler"/>
        <editorNotificationProvider implementation="org.sui.bytecode.SuiBytecodeNotificationProvider"/>

        <fileType name="Sui Move"
                  language="Sui Move"
                  extensions="move"
                  implementationClass="org.sui.lang.MoveFileType"
                  fieldName="INSTANCE"/>

        <codeInsight.lineMarkerProvider language="Sui Move"
                                        implementationClass="org.sui.ide.lineMarkers.ItemSpecsLineMarkerProvider"/>

    <!-- PSI managing -->

        <projectService serviceInterface="org.sui.lang.core.psi.MvPsiManager"
                        serviceImplementation="org.sui.lang.core.psi.MvPsiManagerImpl"/>

        <projectService serviceImplementation="org.sui.cli.settings.MvProjectSettingsService"/>

        <!--specificallytosupportnamedaddressesintests,doesnothinginnon-testenvironment-->
        <projectService serviceInterface="org.sui.cli.tests.NamedAddressFromTestAnnotationService"
                        serviceImplementation="org.sui.cli.tests.NamedAddressServiceImpl"
                        testServiceImplementation="org.sui.cli.tests.NamedAddressServiceTestImpl"/>

        <configurationType
                implementation="org.sui.cli.runConfigurations.sui.SuiCommandConfigurationType"/>
        <!--        <configurationType-->
        <!--                implementation="org.sui.cli.runConfigurations.sui.SuiTransactionConfigurationType"/>-->
        <runConfigurationProducer
                implementation="org.sui.cli.runConfigurations.producers.sui.SuiTestCommandConfigurationProducer"/>
        <!--        <runConfigurationProducer-->
        <!--                implementation="org.sui.cli.runConfigurations.producers.sui.RunCommandConfigurationProducer"/>-->
        <!--        <runConfigurationProducer-->
        <!--                implementation="org.sui.cli.runConfigurations.producers.sui.ViewCommandConfigurationProducer"/>-->
        <runLineMarkerContributor language="Sui Move"
                                  implementationClass="org.sui.ide.lineMarkers.CommandLineMarkerContributor"/>

        <lang.parserDefinition language="Sui Move"
                               implementationClass="org.sui.lang.MoveParserDefinition"/>

        <stubElementTypeHolder class="org.sui.lang.MvElementTypes" externalIdPrefix="move."/>

        <stubIndex implementation="org.sui.lang.index.MvNamedElementIndex"/>
        <stubIndex implementation="org.sui.lang.index.MvEntryFunctionIndex"/>
        <stubIndex implementation="org.sui.lang.index.MvViewFunctionIndex"/>
<!--    <stubIndex implementation="org.move.lang.index.MvTestFunctionIndex" />-->
        <stubIndex implementation="org.sui.lang.index.MvModuleIndex"/>
        <stubIndex implementation="org.sui.lang.index.MvModuleSpecIndex"/>

        <lang.documentationProvider language="Sui Move"
                                    implementationClass="org.sui.ide.docs.MvDocumentationProvider"/>

        <lang.importOptimizer language="Sui Move" implementationClass="org.sui.ide.refactoring.MvImportOptimizer"/>

        <gotoSymbolContributor implementation="org.sui.ide.navigation.goto.MvSymbolNavigationContributor"/>
        <gotoClassContributor implementation="org.sui.ide.navigation.goto.MvStructNavigationContributor"/>

        <lang.syntaxHighlighter language="Sui Move"
                                implementationClass="org.sui.ide.MvHighlighter"/>
        <lang.commenter language="Sui Move"
                        implementationClass="org.sui.ide.MvCommenter"/>
        <lang.braceMatcher language="Sui Move"
                           implementationClass="org.sui.ide.typing.MvBraceMatcher"/>
        <lang.quoteHandler language="Sui Move"
                           implementationClass="org.sui.ide.typing.MvQuoteHandler"/>
        <typedHandler implementation="org.sui.ide.typing.MvAngleBraceTypedHandler"
                      id="MvAngleBracketsHandler"/>
        <typedHandler implementation="org.sui.ide.typing.MoveTextFieldTypedHandler"
                      id="MoveTextFieldTypedHandler"/>
        <typedHandler implementation="org.sui.ide.typing.MvTypedHandler"
                      id="MvTypedHandler"/>
        <enterHandlerDelegate implementation="org.sui.ide.typing.MvEnterInLineCommentHandler"
                              id="MvEnterInLineComments"/>
        <backspaceHandlerDelegate implementation="org.sui.ide.typing.MvAngleBracketsBackspaceHandler"
                                  id="MvAngleBracketsBackspaceHandler"/>

        <lang.formatter language="Sui Move"
                        implementationClass="org.sui.ide.formatter.MvFormattingModelBuilder"/>
        <langCodeStyleSettingsProvider
                implementation="org.sui.ide.formatter.settings.MvLanguageCodeStyleSettingsProvider"/>

        <lang.foldingBuilder language="Sui Move" implementationClass="org.sui.ide.folding.MvFoldingBuilder"/>

        <lang.namesValidator language="Sui Move"
                             implementationClass="org.sui.ide.refactoring.MvNamesValidator"/>
        <lang.refactoringSupport language="Sui Move"
                                 implementationClass="org.sui.ide.refactoring.MvRefactoringSupportProvider"/>

        <!--        <lang.refactoringSupport language="TOML"-->
        <!--                                 implementationClass="org.sui.ide.refactoring.toml.TomlRefactoringSupportProvider"/>-->
        <!--        <renameHandler implementation="org.sui.ide.refactoring.toml.TomlInPlaceRenameHandler" />-->
        <!--        <renameHandler implementation="org.sui.ide.refactoring.toml.TomlRenameHandler" />-->
        <!--        <renamePsiElementProcessor implementation="org.sui.ide.refactoring.toml.MvRenameAddressProcessor"-->
        <!--                                   order="first"-->
        <!--                                   id="mvRenameAddressProcessor" />-->


        <lang.findUsagesProvider language="Sui Move"
                                 implementationClass="org.sui.ide.search.MvFindUsagesProvider"/>
        <usageTypeProvider
                implementation="org.sui.ide.search.NamedAddressUsageTypeProvider"/>
        <findUsagesHandlerFactory
                implementation="org.sui.ide.search.NamedAddressFindUsagesHandlerFactory"/>

        <completion.confidence language="Sui Move"
                               implementationClass="org.sui.lang.core.completion.MvCompletionConfidence"/>
        <completion.contributor language="Sui Move"
                                implementationClass="org.sui.lang.core.completion.CommonCompletionContributor"/>
        <completion.contributor language="Sui Move"
                                implementationClass="org.sui.lang.core.completion.KeywordCompletionContributor"/>
        <completion.contributor language="Sui Move"
                                implementationClass="org.sui.lang.core.completion.MoveTextFieldCompletionContributor"/>
        <completion.contributor language="TOML"
                                implementationClass="org.sui.toml.completion.MoveTomlCompletionContributor"/>
        <weigher key="completion"
                 implementationClass="com.intellij.codeInsight.completion.PriorityWeigher"
                 id="priority"
                 order="first"/>

        <psi.referenceContributor language="TOML"
                                  implementation="org.sui.toml.MoveTomlReferenceContributor"/>
        <psi.referenceContributor language="Sui Move"
                                  implementation="org.sui.toml.NamedAddressReferenceContributor"/>

        <annotator language="Sui Move"
                   implementationClass="org.sui.ide.annotator.MvErrorAnnotator"/>
        <annotator language="Sui Move"
                   implementationClass="org.sui.ide.annotator.MvSyntaxErrorAnnotator"/>
        <annotator language="Sui Move"
                   implementationClass="org.sui.ide.annotator.HighlightingAnnotator"/>

        <highlightingPassFactory implementation="org.sui.ide.annotator.RsHighlightingPassFactoryRegistrar"/>

        <annotator language="TOML"
                   implementationClass="org.sui.toml.MoveTomlErrorAnnotator"/>

        <codeInsight.parameterInfo language="Sui Move"
                                   implementationClass="org.sui.ide.hints.FunctionParameterInfoHandler"/>
        <codeInsight.parameterInfo language="Sui Move"
                                   implementationClass="org.sui.ide.hints.TypeParameterInfoHandler"/>
        <codeInsight.parameterInfo language="Sui Move"
                                   implementationClass="org.sui.ide.hints.StructLitFieldsInfoHandler"/>
        <codeInsight.parameterNameHints language="Sui Move"
                                        implementationClass="org.sui.ide.hints.MvInlayParameterHintsProvider"/>
        <codeInsight.inlayProvider language="Sui Move"
                                   implementationClass="org.sui.ide.hints.type.MvInlayTypeHintsProvider"/>

        <defaultLiveTemplates file="liveTemplates/Move.xml"/>
        <liveTemplateContext contextId="Generic" implementation="org.sui.ide.liveTemplates.MvContextType$Generic"/>
        <liveTemplateContext contextId="Module" implementation="org.sui.ide.liveTemplates.MvContextType$Module"/>
        <liveTemplateContext contextId="Block" implementation="org.sui.ide.liveTemplates.MvContextType$Block"/>

        <renamePsiElementProcessor implementation="org.sui.ide.refactoring.MvRenameProcessor"
                                   order="first"
                                   id="mvRenameProcessor"/>
        <renamePsiElementProcessor implementation="org.sui.ide.refactoring.MvRenameFileProcessor"
                                   order="before renamePsiFile"
                                   id="mvRenamePsiFileProcessor"/>
        <lang.psiStructureViewFactory
                language="Sui Move"
                implementationClass="org.sui.ide.structureView.MvPsiStructureViewFactory"/>

        <declarationRangeHandler
                key="org.sui.lang.core.psi.MvModule"
                implementationClass="org.sui.ide.hints.ModuleDeclarationRangeHandler"/>
        <declarationRangeHandler
                key="org.sui.lang.core.psi.MvFunction"
                implementationClass="org.sui.ide.hints.FunctionDeclarationRangeHandler"/>

        <breadcrumbsInfoProvider implementation="org.sui.ide.MvBreadcrumbsProvider"/>

        <toolWindow id="Sui"
                    anchor="right"
                    factoryClass="org.sui.cli.toolwindow.SuiToolWindowFactory"
                    icon="/icons/sui.svg"/>

        <!--        <statusBarWidgetFactory id="moveExternalLinterWidget"-->
        <!--                                implementation="org.sui.cli.externalLinter.RsExternalLinterWidgetFactory"-->
        <!--                                order="first"/>-->


        <!--        <localInspection language="Sui Move" groupPath="Move" groupName="Naming"-->
        <!--                         displayName="Attempt to override a built-in function"-->
        <!--                         enabledByDefault="true" level="ERROR"-->
        <!--                         implementationClass="org.sui.ide.inspections.lints.FunctionNamingInspection"/>-->
        <localInspection language="Sui Move" groupName="SuiMove"
                         displayName="Unresolved reference"
                         enabledByDefault="true"
                         level="ERROR"
                         implementationClass="org.sui.ide.inspections.MvUnresolvedReferenceInspection"/>
        <localInspection language="Sui Move" groupName="SuiMove"
                         displayName="Field initialization shorthand"
                         enabledByDefault="true" level="WEAK WARNING"
                         implementationClass="org.sui.ide.inspections.FieldInitShorthandInspection"/>
        <localInspection language="Sui Move" groupName="SuiMove"
                         displayName="Invalid module declaration"
                         enabledByDefault="true" level="ERROR"
                         implementationClass="org.sui.ide.inspections.InvalidModuleDeclarationInspection"/>
        <localInspection language="Sui Move" groupName="SuiMove"
                         displayName="Constant naming convention"
                         enabledByDefault="true" level="WARNING"
                         implementationClass="org.sui.ide.inspections.MvConstNamingInspection"/>
        <localInspection language="Sui Move" groupName="SuiMove"
                         displayName="Struct naming convention"
                         enabledByDefault="true" level="WARNING"
                         implementationClass="org.sui.ide.inspections.MvStructNamingInspection"/>
        <localInspection language="Sui Move" groupName="SuiMove"
                         displayName="Function naming convention"
                         enabledByDefault="true" level="WARNING"
                         implementationClass="org.sui.ide.inspections.MvFunctionNamingInspection"/>
        <localInspection language="Sui Move" groupName="SuiMove"
                         displayName="Local variable naming convention"
                         enabledByDefault="true" level="WARNING"
                         implementationClass="org.sui.ide.inspections.MvLocalBindingNamingInspection"/>
        <localInspection language="Sui Move" groupName="SuiMove"
                         displayName="Type checking"
                         enabledByDefault="true" level="ERROR"
                         implementationClass="org.sui.ide.inspections.MvTypeCheckInspection"/>
        <!-- <localInspection language="Sui Move" groupName="SuiMove"
                         displayName="Ability checking"
                         enabledByDefault="false" level="ERROR"
                         implementationClass="org.sui.ide.inspections.MvAbilityCheckInspection"/>-->
        <localInspection language="Sui Move" groupName="SuiMove"
                         displayName="Missing acquires"
                         enabledByDefault="true" level="ERROR"
                         implementationClass="org.sui.ide.inspections.MvMissingAcquiresInspection"/>
        <localInspection language="Sui Move" groupName="SuiMove"
                         displayName="Unused acquires"
                         enabledByDefault="true" level="WARNING"
                         implementationClass="org.sui.ide.inspections.MvUnusedAcquiresTypeInspection"/>
        <localInspection language="Sui Move" groupName="SuiMove"
                         displayName="Unused struct type parameter"
                         enabledByDefault="true" level="ERROR"
                         implementationClass="org.sui.ide.inspections.PhantomTypeParameterInspection"/>
        <localInspection language="Sui Move" groupName="SuiMove"
                         displayName="Unused import"
                         enabledByDefault="true" level="WARNING"
                         implementationClass="org.sui.ide.inspections.MvUnusedImportInspection"/>
        <localInspection language="Sui Move" groupName="SuiMove"
                         displayName="Unused declaration"
                         enabledByDefault="true" level="WARNING"
                         implementationClass="org.sui.ide.inspections.MvUnusedVariableInspection"/>
        <localInspection language="Sui Move" groupName="SuiMove"
                         displayName="Unused test signer"
                         enabledByDefault="true" level="WARNING"
                         implementationClass="org.sui.ide.inspections.UnusedTestSignerInspection"/>
        <localInspection language="Sui Move" groupName="SuiMove"
                         displayName="Redundant type cast"
                         enabledByDefault="true" level="WARNING"
                         implementationClass="org.sui.ide.inspections.RedundantTypeCastInspection"/>
        <localInspection language="Sui Move" groupName="SuiMove"
                         displayName="Convert to method call"
                         enabledByDefault="true" level="WEAK WARNING"
                         implementationClass="org.sui.ide.inspections.ReplaceWithMethodCallInspection"/>
        <localInspection language="Sui Move" groupName="SuiMove"
                         displayName="Convert to index expr"
                         enabledByDefault="true" level="WEAK WARNING"
                         implementationClass="org.sui.ide.inspections.compilerV2.ReplaceWithIndexExprInspection"/>

        <!--cannotberunon-the-fly,thereforeenabled-->
        <!--        <globalInspection language="Sui Move" groupName="Move"-->
        <!--                          enabledByDefault="true" level="ERROR"-->
        <!--                          implementationClass="org.sui.ide.inspections.MvExternalLinterInspection"-->
        <!--                          displayName="External linter"/>-->

        <!-- Color Settings -->
        <colorSettingsPage implementation="org.sui.ide.colors.MvColorSettingsPage"/>

        <extendWordSelectionHandler implementation="org.sui.ide.wordSelection.MvListSelectionHandler"/>
        <extendWordSelectionHandler implementation="org.sui.ide.wordSelection.MvTypeParamBoundListHandler"/>
        <extendWordSelectionHandler implementation="org.sui.ide.wordSelection.MvStringSelectionHandler"/>

        <additionalTextAttributes scheme="Default" file="colors/MoveDefault.xml"/>
        <additionalTextAttributes scheme="Darcula" file="colors/MoveDarcula.xml"/>

        <projectTaskRunner implementation="org.sui.cli.runConfigurations.SuiBuildTaskRunner"/>

        <!--ProjectCreation-->
        <projectOpenProcessor id="Sui Move" implementation="org.sui.ide.newProject.MoveLangProjectOpenProcessor"/>
        <directoryProjectGenerator implementation="org.sui.ide.newProject.MoveProjectGenerator"/>

        <postStartupActivity
                implementation="org.sui.ide.newProject.projectActivity.AlwaysRefreshProjectsAfterOpen"/>
        <!--        <postStartupActivity implementation="org.sui.ide.newProject.projectActivity.PreImportedModuleStartupActivity"/>-->
        <!--     background = 5 seconds delayed  -->
        <!--    <postStartupActivity-->
        <!--        implementation="org.sui.cli.openProject.CreateDefaultCompileRunConfiguration" />-->


        <projectConfigurable instance="org.sui.cli.settings.PerProjectSuiConfigurable"
                             displayName="Sui Move Language"
                             groupId="language"
                             id="language.sui.move"/>


        <!--        <projectConfigurable instance="org.sui.cli.externalLinter.MvExternalLinterConfigurable"-->
        <!--                             parentId="language.move"-->
        <!--                             id="language.move.compiler.check"-->
        <!--                             displayName="ExternalLinters"/>-->

        <projectService serviceInterface="org.sui.utils.SuiProjectRootService"
                        serviceImplementation="org.sui.utils.SuiProjectRootServiceImpl"
                        testServiceImplementation="org.sui.utils.TestProjectRootServiceImpl"/>

        <projectService serviceImplementation="org.sui.cli.MoveProjectsService"/>
        <!--        <projectService serviceImplementation="org.move.cli.packages.MovePackageService"/>-->

        <!--        <projectService serviceInterface="com.intellij.openapi.externalSystem.autoimport.ExternalSystemProjectTracker"-->
        <!--                        serviceImplementation="org.move.cli.externalSystem.MoveExternalSystemProjectAware"-->
        <!--                        overrides="true" />-->
        <!--<applicationServiceserviceImplementation="org.sui.openapiext.OpenSSLInfoService"/>-->

        <additionalLibraryRootsProvider implementation="org.sui.cli.BuildLibraryRootsProvider"/>

        <!-- Notifications -->
        <notificationGroup id="MOVE_ON_SUI" displayType="BALLOON"/>

        <notificationGroup id="Move Compile Log" displayType="NONE"/>
        <editorNotificationProvider
                implementation="org.sui.ide.notifications.InvalidBlockchainCliConfiguration"/>
        <editorNotificationProvider
                implementation="org.sui.ide.notifications.NoMoveProjectDetectedNotificationProvider"/>

        <intentionAction>
            <language>Sui Move</language>
            <className>org.sui.ide.intentions.RemoveCurlyBracesIntention</className>
            <category>Move</category>
        </intentionAction>
        <!--    <intentionAction>-->
        <!--      <language>Move</language>-->
        <!--      <className>org.move.ide.intentions.InlineAddressBlockIntention</className>-->
        <!--      <category>Move</category>-->
        <!--    </intentionAction>-->
        <!--        <intentionAction>-->
        <!--            <language>Sui Move</language>-->
        <!--            <className>org.sui.ide.intentions.InlineAddressBlockIntention</className>-->
        <!--            <category>Move</category>-->
        <!--        </intentionAction>-->
	<intentionAction>
            <language>Sui Move</language>
            <className>org.sui.ide.intentions.ChopValueArgumentListIntention</className>
            <category>Move</category>
        </intentionAction>
        <intentionAction>
            <language>Sui Move</language>
            <className>org.sui.ide.intentions.ChopAttrArgumentListIntention</className>
            <category>Move</category>
        </intentionAction>
        <intentionAction>
            <language>Sui Move</language>
            <className>org.sui.ide.intentions.ChopStructLiteralIntention</className>
            <category>Move</category>
        </intentionAction>

        <errorHandler implementation="org.sui.cli.sentryReporter.SentryErrorReporter"/>

        <registryKey key="org.sui.debug.enabled"
                     defaultValue="false"
                     restartRequired="false"
                     description="Enable debug mode for Move"/>
        <registryKey key="org.sui.external.linter.max.duration"
                     defaultValue="3000"
                     restartRequired="false"
                     description="Show notification warning if the external linter is running longer than the set value(ms)"/>
        <registryKey key="org.move.sui.bundled.force.supported"
                     defaultValue="false"
                     restartRequired="false"
                     description="Force-enable support for pre-compiled bundled Aptos CLI(imitate non-MacOS)"/>
        <!--        <registryKey key="org.move.aptos.bundled.force.unsupported"-->
        <!--                     defaultValue="false"-->
        <!--                     restartRequired="false"-->
        <!--                     description="Force-disable support for pre-compiled bundled Aptos CLI(imitate MacOS)"/>-->
        <!--        <registryKey key="org.move.aptos.bundled.force.supported"-->
        <!--                     defaultValue="false"-->
        <!--                     restartRequired="false"-->
        <!--                     description="Force-enable support for pre-compiled bundled Aptos CLI(imitate non-MacOS)"/>-->
        <registryKey key="org.move.sui.bundled.force.unsupported"
                     defaultValue="false"
                     restartRequired="false"
                     description="Force-disable support for pre-compiled bundled Sui CLI(imitate MacOS)"/>

        <advancedSetting
                id="org.move.sui.test.tool.window"
                default="false"
                groupKey="advanced.setting.sui.group"
                descriptionKey="advanced.setting.org.move.sui.test.tool.window.description"
        />
    </extensions>

    <projectListeners>
        <listener class="org.sui.ide.notifications.UpdateNotificationsOnSettingsChangeListener"
                  topic="org.sui.cli.settings.MvProjectSettingsServiceBase$MoveSettingsListener"
                  activeInTestMode="false"/>
        <!--        <listener class="org.sui.cli.externalLinter.RsExternalLinterWidgetUpdater"-->
        <!--                  topic="org.sui.cli.MoveProjectsService$MoveProjectsListener"/>-->
    </projectListeners>
    <actions>
        <action id="Sui.NewMoveFile"
                class="org.sui.ide.actions.CreateMoveFileAction"
                text="Sui Move File"
                description="Create new Move file">
            <add-to-group group-id="NewGroup" anchor="before" relative-to-action="NewFile"/>
        </action>
        <action id="Sui.RefreshAllProjects"
                description="Update Move project information"
                text="Update Move Projects"
                class="org.sui.ide.actions.RefreshMoveProjectsAction"
                icon="AllIcons.Actions.Refresh"/>
        <action id="Sui.DownloadSui"
                text="Download Sui CLI"
                description="Download sui-cli executable from Github"
                class="org.sui.ide.actions.DownloadSuiSDKAction"
                icon="AllIcons.Actions.Download"/>

        <action id="Sui.RunExternalLinter"
                class="org.sui.ide.actions.MvRunExternalLinterAction"
                icon="/icons/externalLinter.svg">
        </action>
        <action id="Sui.ShowSettings"
                class="org.sui.ide.actions.MoveEditSettingsAction"
                icon="AllIcons.General.Settings">
        </action>
        <action id="Sui.FetchSuiPackage"
                class="org.sui.bytecode.FetchSuiPackageAction"
                icon="AllIcons.Actions.Download">
        </action>

        <action id="Sui.DecompileSuiMvFile"
                class="org.sui.bytecode.DecompileSuiMvFileAction">
            <add-to-group group-id="ProjectViewPopupMenu"/>
        </action>

        <action id="Sui.GetActiveAddress"
                description="Get active address"
                text="Get Active Address"
                class="org.sui.ide.actions.GetActiveAddressAction"
                icon="AllIcons.Actions.PreserveCaseSelected"/>
        <action id="Sui.GetGas"
                description="Get gas"
                text="Get Gas"
                class="org.sui.ide.actions.GetGasAction"
                icon="AllIcons.Actions.PreserveCase"/>
        <action id="Sui.OpenAddressDialog"
                description="Open address dialog"
                text="Open Address Dialog"
                class="org.sui.ide.actions.OpenSwitchAddressDialogAction"
                icon="AllIcons.Actions.ListChanges"/>
        <action id="Sui.OpenEnvsDialog"
                description="Open envs dialog"
                text="Open Envs Dialog"
                class="org.sui.ide.actions.OpenSwitchEnvsDialogAction"
                icon="AllIcons.Actions.DiffWithClipboard"/>
        <action id="Sui.OpenObjectDialog"
                description="Open objects dialog"
                text="Open Objects Dialog"
                class="org.sui.ide.actions.OpenObjectListAction"
                icon="AllIcons.Actions.GroupByPrefix"/>

        <group id="Move.Sui">
            <reference id="Sui.RefreshAllProjects"/>
            <separator/>
            <!--            <reference id="Sui.RunExternalLinter"/>-->
            <separator/>
            <reference id="ExpandAll"/>
            <reference id="CollapseAll"/>
            <separator/>
            <reference id="Sui.ShowSettings"/>
            <separator/>
            <reference id="Sui.GetActiveAddress"/>
            <reference id="Sui.OpenAddressDialog"/>
            <reference id="Sui.OpenEnvsDialog"/>
            <reference id="Sui.OpenObjectDialog"/>
        </group>
    </actions>
</idea-plugin>
